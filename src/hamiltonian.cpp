#include "../include/hamiltonian.hpp"
#include "../include/constants.hpp"
#include "../include/pmns_matrix.hpp"
#include "../include/electron_density.hpp"
#include <complex>
#include <iostream>
#include <fstream>

namespace neutrino {

ComplexMatrix hamiltonian(double r, 
                         double E_nu, 
                         const std::vector<double>& r_vals, 
                         const std::vector<double>& Ne_vals) {
    

    // ÁúüÁ©∫È†Ö
    ComplexMatrix H_vac = {{
        {{0.0, 0.0, 0.0}},
        {{0.0, delta_m21_squared , 0.0}},
        {{0.0, 0.0, delta_m31_squared}}
    }};

    // PMNS Áü©Èô£
    ComplexMatrix U = get_pmns_matrix();
    /*
    std::cout << "PMNS Matrix:" << std::endl;
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            std::cout << U[i][j] << " ";
        }
        std::cout << std::endl;
    }*/
    // ËΩâÊèõÂà∞Âë≥ÈÅìÂü∫Â∫ï (U * H_vac * U^‚Ä†)
    ComplexMatrix H_vac_mass = {{}};

    // ÂÖàË®àÁÆó H_vac * U^‚Ä†
    ComplexMatrix H_vac_Uconj = {{}};
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            H_vac_Uconj[i][j] = 0.0;
            for (int k = 0; k < 3; k++) {
                H_vac_Uconj[i][j] += H_vac[i][k] * std::conj(U[j][k]);
            }
        }
    }

    // Ë®àÁÆó U * (H_vac * U^‚Ä†)
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            H_vac_mass[i][j] = 0.0;
            for (int k = 0; k < 3; k++) {
                H_vac_mass[i][j] += U[i][k] * H_vac_Uconj[k][j];
            }
            // ‚¨ÖÔ∏è ÁúüÊ≠£ÁöÑË≥™ÈáèÂìàÂØÜÈ†ìÈáè
            H_vac_mass[i][j] /= (2.0 * E_nu);
        }
    }
    double V_e = electron_potential(r, r_vals, Ne_vals);
    // Áâ©Ë≥™ÊïàÊáâÈ†Ö

    // **Êñ∞Â¢ûÈÄôË°å‰æÜÊ™¢Êü• V_e ÊòØÂê¶ÁÇ∫ 0**
    //std::cout << "V_e at r = " << r << " is " << V_e << std::endl;

    ComplexMatrix H_matter = {{
        {{V_e, 0.0, 0.0}},
        {{0.0, 0.0, 0.0}},
        {{0.0, 0.0, 0.0}}
    }};
    
    // ËΩ¨Êç¢ H_matter Âà∞Ë¥®ÈáèÂü∫Â∫ï
    ComplexMatrix H_matter_mass = {{}};
    /*
    if (r <= 1.0) {  // Â§™ÈôΩÂÖßÈÉ®
        double V_e = electron_potential(r, r_vals, Ne_vals);
        //std::cout << "V_e = " << V_e << std::endl;  // Ëº∏Âá∫
        H_matter[0][0] = V_e;
    }
    */
      // ÂÖàËÆ°ÁÆó H_matter * U^‚Ä†
    ComplexMatrix H_matter_Uconj = {{}};
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                H_matter_Uconj[i][j] = 0.0;
                for (int k = 0; k < 3; k++) {
                    H_matter_Uconj[i][j] += H_matter[i][k] * std::conj(U[j][k]);
                }
            }  
        }          
    // ËÆ°ÁÆó U * (H_matter * U^‚Ä†)
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                H_matter_mass[i][j] = 0.0;
                for (int k = 0; k < 3; k++) {
                    H_matter_mass[i][j] += U[i][k] * H_matter_mass[k][j];
                }
            }
        }




    // Á∏ΩÂìàÂØÜÈ†ìÈáè (H_mass + H_matter)
    ComplexMatrix H_total = {{}};
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            H_total[i][j] = H_vac_mass[i][j] + H_matter[i][j];
            
        }
    }
    /* 
    std::cout << "[DEBUG] E_nu = " << E_nu 
    << ", H_total[0][0] = " << H_total[0][0]
    << ", H_total[1][1] = " << H_total[1][1]
    << ", H_total[2][2] = " << H_total[2][2]
    << std::endl;
    */
   
    /*
    printMatrix(H_vac, "H_vac");
    printMatrix(H_matter, "H_matter");
    printMatrix(H_total, "H_total");*/
    double mass_term = delta_m21_squared / (2 * E_nu);
    const double resonance_ve = mass_term;
    /*
    if (std::abs(V_e - resonance_ve) / resonance_ve < 0.05) {
        std::cout << "üü° ÂÖ±ÊåØÂçÄ r = " << r << std::endl;
        printMatrix(H_total, "H_total");
    }
    if (std::abs(r - 0.547) < 1e-4) {
        std::cout << "üî• ÈÄ≤ÂÖ• MSW resonance Èªû r ‚âà 0.547" << std::endl;
        printMatrix(H_total, "H_total");
    }*/
    
    
    
    double res_condition = mass_term * cos(2*theta12);

    const double c12 = std::cos(theta12);
    // Ê™¢Êü•Áâ©Ë≥™ÊïàÊáâÊòØÂê¶Ë∂≥Â§†Âº∑ÁÉàÔºàÈ´òËÉΩÊÉÖÊ≥Å‰∏ãÔºâ
    double MSW_resonance = mass_term * c12 * c12;
    //std::cout << "r = " << r << ", Ve = " << V_e << " eV, MSW ÂÖ±ÊåØÊ¢ù‰ª∂ = " << MSW_resonance << " eV" << std::endl;
    
    // Ê∏¨Ë©¶: Â¶ÇÊûúËÉΩÈáèÂæàÈ´òÔºåÊâãÂãïÊèêÈ´ò Ve ‰æÜÁúãÂà∞ÊïàÊûú (ÂÉÖÁî®ÊñºÊ∏¨Ë©¶)
    if (E_nu > 1e5 && V_e < MSW_resonance * 0.1) {
        std::cout << "‚ö†Ô∏è Â∞çÊñºÈ´òËÉΩÂæÆ‰∏≠Â≠ê E = " << E_nu << " eVÔºåVe = " << V_e << " ÂèØËÉΩÂ§™Â∞è" << std::endl;
    }
    //std::cout << "MSW resonance occurs when Ve ‚âà " << res_condition << " eV" << std::endl;

    //std::cout << "Mass term = " << mass_term << ", V_e = " << V_e << std::endl;
    // Âú®ÈÄôË£°Ëº∏Âá∫ÂìàÂØÜÈ†ìÈáè
    /*
    std::cout << "H_total at r = " << r << ":" << std::endl;
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            std::cout << H_total[i][j] << " ";
        }
        std::cout << std::endl;
    }
    std::cout << std::flush; // Âà∑Êñ∞Ëº∏Âá∫ÊµÅ
    */
    return H_total;
}




void neutrino_evolution(double t, 
                      const std::array<std::complex<double>, 9>& psi,
                      double E_nu,
                      const std::vector<double>& r_vals,
                      const std::vector<double>& Ne_vals,
                      std::array<std::complex<double>, 9>& dpsi_dt) {

    //std::cout << "Entering neutrino_evolution() function at t = " << t << ", E_nu = " << E_nu << std::endl;

    // Â∞á‰∏ÄÁ∂≠Êï∏ÁµÑÈáçÊñ∞ÊéíÂàóÁÇ∫ 3x3 Áü©Èô£
    ComplexMatrix psi_matrix = {{}};
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            psi_matrix[i][j] = psi[i * 3 + j];
        }
    }
    
    // Ë®àÁÆóÂìàÂØÜÈ†ìÈáè
    ComplexMatrix H = hamiltonian(t, E_nu, r_vals, Ne_vals);
    // È©óË≠âÂìàÂØÜÈ†ìÈáèÈùûÈõ∂
    bool H_is_zero = true;
    for (int i = 0; i < 3 && H_is_zero; i++) {
        for (int j = 0; j < 3 && H_is_zero; j++) {
            if (std::abs(H[i][j]) > 1e-10) {
                H_is_zero = false;
            }
        }
    }
    
    if (H_is_zero) {
        std::cout << "Ë≠¶Âëä: ÂìàÂØÜÈ†ìÈáèÂú® r = " << t << " ËôïÊé•ËøëÈõ∂!" << std::endl;
    }
    
    /* DEBUG: Âç∞Âá∫ÂìàÂØÜÈ†ìÈáè‰ª•Ë®∫Êñ∑ÂïèÈ°å
    if (std::fmod(t, 0.5) < 0.01) {  // ÊØèÈöî0.5ÂñÆ‰ΩçÊâìÂç∞‰∏ÄÊ¨°
        std::cout << "===== ÂìàÂØÜÈ†ìÈáè @ r = " << t << " =====" << std::endl;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                std::cout << H[i][j] << " ";
            }
            std::cout << std::endl;
        }

        // Ê™¢Êü•ÂØÜÂ∫¶Áü©Èô£
        std::cout << "===== ÂØÜÂ∫¶Áü©Èô£ @ r = " << t << " =====" << std::endl;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                std::cout << psi_matrix[i][j] << " ";
            }
            std::cout << std::endl;
        }
    }*/
    // üîπ Êñ∞Â¢ûÔºöÂç∞Âá∫ Hamiltonian
    //printMatrix(H, "H (Hamiltonian at t = " + std::to_string(t) + ")");
    // Ëº∏Âá∫ psi_matrix
    /*
    std::cout << "psi_matrix:" << std::endl;
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            std::cout << psi_matrix[i][j] << " ";
        }
        std::cout << std::endl;
    }

    // Ëº∏Âá∫ H
    std::cout << "H:" << std::endl;
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            std::cout << H[i][j] << " ";
        }
        std::cout << std::endl;
    }
        */

    /*Ë®àÁÆóÊºîÂåñ (-i * H * psi_matrix)
    ComplexMatrix dpsi_dt_matrix = {{}};
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            dpsi_dt_matrix[i][j] = 0.0;
            for (int k = 0; k < 3; k++) {
                dpsi_dt_matrix[i][j] -= std::complex<double>(0, 1) * H[i][k] * psi_matrix[k][j];
            }
            //std::cout << "dpsi_dt_matrix[" << i << "][" << j << "] = " << dpsi_dt_matrix[i][j] << std::endl;
        }
    }*/
    // üîß ‰øÆÊ≠£ÔºöÊîπÁÇ∫‰ΩøÁî® commutatorÔºö-i (HœÅ - œÅH)
    ComplexMatrix dpsi_dt_matrix = {{}};
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            std::complex<double> term1 = 0.0;
            std::complex<double> term2 = 0.0;
            for (int k = 0; k < 3; k++) {
                term1 += H[i][k] * psi_matrix[k][j];  // H * œÅ
                term2 += psi_matrix[i][k] * H[k][j];  // œÅ * H
            }
            dpsi_dt_matrix[i][j] = -std::complex<double>(0.0, 1.0) * (term1 - term2);  // -i[H, œÅ]
        }
    }

    // Á¢∫Ë™çÊºîÂåñ‰∏çÁÇ∫Èõ∂
    bool evolution_is_zero = true;
    for (int i = 0; i < 3 && evolution_is_zero; i++) {
        for (int j = 0; j < 3 && evolution_is_zero; j++) {
            if (std::abs(dpsi_dt_matrix[i][j]) > 1e-10) {
                evolution_is_zero = false;
            }
        }
    }
    
    if (evolution_is_zero) {
        std::cout << "Ë≠¶Âëä: ÊºîÂåñÂú® r = " << t << " ËôïÊé•ËøëÈõ∂!" << std::endl;
    }
     
   
     // üîπ Êñ∞Â¢ûÔºöË®àÁÆóÈõªÂ≠ê‰∏≠ÂæÆÂ≠êÁöÑÁîüÂ≠òÊ©üÁéá P_ee
    //double P_ee = std::norm(psi_matrix[0][0]);  

    // üîπ Âç∞Âá∫ P_ee ‰æÜÊ™¢Êü•
    //std::cout << "P_ee at t = " << t << " is " << P_ee << std::endl;
     
    // Â∞áÁµêÊûúËΩâÂõû‰∏ÄÁ∂≠Êï∏ÁµÑ
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            dpsi_dt[i * 3 + j] = dpsi_dt_matrix[i][j];
        }
    }
    
 }

} // namespace neutrino